package game;//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Game.Controller.java
//  @ Date : 2022. 03. 23.
//  @ Author : 
//
//

import assets.field.*;
import assets.virologist.State;
import assets.virologist.Virologist;
import collectables.Collectable;
import collectables.agent.*;
import collectables.equipment.*;
import collectables.genome.*;
import collectables.material.Aminoacid;
import collectables.material.Materials;
import collectables.material.Nucleotide;
import game.ui.SceneLauncher;

import java.awt.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Controls the Game and the turns of the players
 */
public class Controller implements java.io.Serializable {
    private SceneLauncher sceneLauncher;
    private final ArrayList<Field> map;
    private final ArrayList<collectables.genome.Genome> learnableGenomes;
    private final ArrayList<Virologist> virologists;
    private final ArrayList<Point> fieldCoords;
    /**
     * the player
     */
    private int index;

    public Controller() {
        map = new ArrayList<>();
        learnableGenomes = new ArrayList<>();
        virologists = new ArrayList<>();
        fieldCoords = new ArrayList<>();
    }

    public void start() {
        index = virologists.size() - 1;
        nextPlayer();
    }

    /**
     * Calls the next player
     */
    public void nextPlayer() {
        if (virologists.size() - 1 == index) {
            index = 0;
        } else {
            index++;
        }
        Virologist v = virologists.get(index);

        while (v.getState() == State.KILLED) {
            virologists.remove(v);
            v.GetRoute().GetLocation().GetVirologists().remove(v);
            if(index>virologists.size()-1){
                index=0;
            }
            v = virologists.get(index);
        }

        v.SetState(State.BEFORE_MOVE);
    }

    public void setSceneLauncher(SceneLauncher sl){
        this.sceneLauncher = sl;
    }
    /**
     * The current Virologist ends his turn.
     */
    public void endTurn() {
        getCurrentVirologist().EndTurn();
        if (getCurrentVirologist().GetLearnedGenomes().size() == learnableGenomes.size()) {
            sceneLauncher.SetWinner(getCurrentVirologist().GetName());
            sceneLauncher.SwitchScenes(SceneLauncher.GLOBALGAMESTATES.End);
            System.out.printf("%s won the game!!!!\n", getCurrentVirologist().GetName());
        } else
            nextPlayer();
    }

    public List<Field> getMap() {
        return map;
    }

    public List<Virologist> getVirologists() {
        return virologists;
    }

    public int getIndex() {
        return index;
    }

    public List<Point> getFieldCoords() {
        return fieldCoords;
    }

    public void importMap(String fileName) {
        this.importFields(fileName);
        this.setFieldNeighbours(fileName);
        this.placeVirologists(fileName);
    }

    public void importFields(String fileName) {
        try {
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);
            while (true) {
                String line = br.readLine();
                if (line == null || line.equals("") || line.equals("virologists:")) break;
                String[] field = line.split(" ");
                fieldCoords.add(new Point(Integer.parseInt(field[1]), Integer.parseInt(field[2])));
                switch (field[3]) {
                    case "laboratory":
                    case "bearlaboratory":
                        createLaboratory(field[3], field[4], field[0]);
                        break;
                    case "shelter":
                        createShelter(field[3], field[4], field[0]);
                        break;
                    case "warehouse":
                        createWarehouse(field[3], field[4], field[0]);
                        break;
                    default:
                        createNormal(field[3], field[0]);
                        break;
                }
            }
            br.close();
            fr.close();
        } catch (IOException e) {
        e.printStackTrace();
        }
    }

    public void setFieldNeighbours(String fileName) {
        try {
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);
            String line = br.readLine();
            while (line != null) {

                if (line.equals("virologists:")) break;
                String[] field = line.split(" ");
                if (field[3].equals("normal")) {
                    for (int i = 4; i < field.length; i++)
                        searchFieldById(field[0]).SetNeighbour(searchFieldById(field[i]));
                } else {
                    for (int i = 5; i < field.length; i++)
                        searchFieldById(field[0]).SetNeighbour(searchFieldById(field[i]));
                }
                line = br.readLine();
            }
            br.close();
            fr.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void placeVirologists(String fileName) {
        try {
            FileReader fr = new FileReader(fileName);
            BufferedReader br = new BufferedReader(fr);
            String line = br.readLine();
            while (line != null) {
                line = br.readLine();
                if(line.equals("virologists:")) break;
            }
            line = br.readLine();
            while (line != null) {
                String[] virologist = line.split(" ");
                if (virologist.length == 2) {
                    this.createVirologist(virologist[0], virologist[1]);
                }
                if (line.equals("")) break;
                line = br.readLine();
            }
            br.close();
            fr.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    public Field searchFieldById(String id) {
        for (Field field : map) {
            if (field.GetFieldId().equals(id)) {
                return field;
            }
        }
        return null;
    }


    public void addLearnableGenome(Genome g) {
        if (g == null)
            return;
        boolean contains = false;
        for (Genome learned : learnableGenomes) {
            if (learned.GetName().equals(g.GetName()))
                contains = true;
        }
        if (!contains)
            learnableGenomes.add(g);
    }


    /**
     * Creates a field.
     *
     * @param type    the type of the Field (normal, laboratory etc.)
     * @param fieldID the ID of the created Field
     */
    public void createField(String type, String fieldID) {
        Field f;
        switch (type) {
            case "normal":
                f = new Normal();
                break;
            case "shelter":
                f = new Shelter();
                break;
            case "warehouse":
                f = new WareHouse();
                break;
            default:
                return;
        }
        f.SetFieldID(fieldID);
        map.add(f);
    }

    /**
     * Creates a Laboratory
     *
     * @param genome  the Genome that can be learned in the Laboratory
     * @param fieldID the ID of the created Field
     */
    public void createLaboratory(String type, String genome, String fieldID) {
        Field f;
        switch (type) {
            case "laboratory":
                f = new Laboratory(stringToGenome(genome));
                break;
            case "bearlaboratory":
                f = new BearLaboratory(stringToGenome(genome));
                break;
            default:
                return;
        }
        addLearnableGenome(stringToGenome(genome));
        f.SetFieldID(fieldID);
        map.add(f);
    }

    public void createWarehouse(String type, String material, String fieldID) {
        Field f = new WareHouse();
        if (material.equals("aminoacid")) {
            for (int i = 0; i < 20; i++)
                f.getBackpack().add(new Aminoacid());
        }
        if (material.equals("nucleotide")) {
            for (int i = 0; i < 20; i++)
                f.getBackpack().add(new Nucleotide());
        }
        f.SetFieldID(fieldID);
        map.add(f);
    }

    public void createShelter(String type, String equipment, String fieldID) {
        Field f = new Shelter();
        for (int i = 0; i < 5; i++)
            f.getBackpack().add(stringToEquipment(equipment));
        f.SetFieldID(fieldID);
        map.add(f);
    }

    public void createNormal(String type, String fieldID) {
        Field f = new Normal();
        f.SetFieldID(fieldID);
        map.add(f);
    }


    /**
     * Makes two Field neighbors.
     *
     * @param fieldID1 the ID of the first Field
     * @param fieldID2 the ID of the second Field
     */
    public void neighborFields(String fieldID1, String fieldID2) {
        Field field1 = getField(fieldID1);
        Field field2 = getField(fieldID2);
        field1.SetNeighbour(field2);
        field2.SetNeighbour(field1);
    }

    /**
     * Create a Virologist.
     *
     * @param name    the name of the Virologist
     * @param fieldID the ID of the Field he will get created to
     */
    public void createVirologist(String name, String fieldID) {
        Virologist v = new Virologist();
        v.SetName(name);
        Field field = getField(fieldID);
        v.GetRoute().Add(field);
        field.Accept(v);
        virologists.add(v);
    }

    /**
     * Puts some Aminoacid on a Field.
     *
     * @param quantity the number of the Aminoacids
     * @param fieldID  the ID of the Field
     */
    public void putAminoacidOnField(int quantity, String fieldID) {
        Field field = getField(fieldID);
        for (int i = 0; i < quantity; i++)
            field.getBackpack().add(new Aminoacid());
    }

    /**
     * Puts some Nucleotide on a Field.
     *
     * @param quantity the number of the Nucleotide
     * @param fieldID  the ID of the Field
     */
    public void putNucleotideOnField(int quantity, String fieldID) {
        Field field = getField(fieldID);
        for (int i = 0; i < quantity; i++)
            field.getBackpack().add(new Nucleotide());
    }

    /**
     * Put Equipment on a Field.
     *
     * @param type    the type of the Equipment
     * @param fieldID the ID of the Field
     */
    public void putEquipmentOnField(String type, String fieldID) {
        Field field = getField(fieldID);
        field.getBackpack().add(stringToEquipment(type));
    }

    /**
     * Gives some Aminoacid to a Virologist.
     *
     * @param quantity the number of the Aminoacids
     * @param name     the name of the Virologist
     */
    public void giveAminoacidToVirologist(int quantity, String name) {
        for (Virologist v : virologists) {
            if (v.GetName().equals(name)) {
                for (int i = 0; i < quantity; i++) {
                    v.getBackpack().add(new Aminoacid());
                }
            }
        }
    }

    /**
     * Gives some Nucleotide to a Virologist.
     *
     * @param quantity the number of the Nucleotide
     * @param name     the name of the Virologist
     */
    public void giveNucleotideToVirologist(int quantity, String name) {
        for (Virologist v : virologists) {
            if (v.GetName().equals(name)) {
                for (int i = 0; i < quantity; i++) {
                    v.getBackpack().add(new Nucleotide());
                }
            }
        }
    }

    /**
     * Gives Equipment to a Virologist.
     *
     * @param type the type of the Equipment
     * @param name the name of the Virologist
     */
    public void giveEquipmentToVirologist(String type, String name) {

        for (Virologist v : virologists) {
            if (v.GetName().equals(name)) {
                Equipment equipment = stringToEquipment(type);
                if(equipment == null) {
                    return;
                }
                equipment.Apply(v);
                v.getBackpack().add(equipment);
            }
        }
    }

    /**
     * Gives Agent to a Virologist.
     *
     * @param type the type of the Agent
     * @param name the name of the Virologist
     */
    public void giveAgentToVirologist(String type, String name) {
        for (Virologist v : virologists) {
            if (v.GetName().equals(name)) {
                v.getBackpack().add(stringToAgent(type));
            }
        }

    }

    /**
     * Returns the Virologist who has the given name.
     *
     * @param name the given name
     * @return the Virologist who has that name
     */
    public Virologist getVirologist(String name) {
        for (Virologist v : virologists) {
            if (v.GetName().equals(name)) {
                return v;
            }
        }
        return null;
    }

    /**
     * Returns the current Virologist.
     *
     * @return the current Virologist
     */
    public Virologist getCurrentVirologist() {
        return virologists.get(index);
    }

    /**
     * Returns a Field that's ID matches the given ID.
     *
     * @param fieldID the given ID
     * @return the returned Field
     */
    public Field getField(String fieldID) {
        for (Field field : map) {
            if (field.getFieldID().equals(fieldID))
                return field;
        }
        return null;
    }

    /**
     * Returns the Field the current Virologist is on.
     *
     * @return the Field
     */
    public Field getCurrentField() {
        return virologists.get(index).GetRoute().GetLocation();
    }

    /**
     * Moves the current Virologist by the given direction.
     * Calling random functions is forbidden.
     *
     * @param direction the given direction
     */
    public void moveVirologistRandomOff(int direction) {
        virologists.get(index).MoveRandomOff(direction);
    }

    /**
     * Moves the current Virologist by the given direction.
     *
     * @param direction the given direction
     */
    public void moveVirologist(int direction) {
        getCurrentVirologist().Move(direction);
    }

    /**
     * The current Virologist drops some Aminoacid.
     *
     * @param quantity the number of Aminoacid
     */
    public void dropAminoacid(int quantity) {
        ArrayList<Collectable> aminos = new ArrayList<>();
        for (int i = 0; i < quantity && i < getCurrentVirologist().getBackpack().getAminos().size(); i++) {
            aminos.add(getCurrentVirologist().getBackpack().getAminos().get(i));
        }
        getCurrentVirologist().DropCollectable(aminos);
    }

    /**
     * The current Virologist drops some Nucleotide.
     *
     * @param quantity the number of Nucleotide
     */
    public void dropNucleotide(int quantity) {
        ArrayList<Collectable> nucleos = new ArrayList<>();
        for (int i = 0; i < quantity && i < getCurrentVirologist().getBackpack().getNucleotide().size(); i++) {
            nucleos.add(getCurrentVirologist().getBackpack().getNucleotide().get(i));
        }
        getCurrentVirologist().DropCollectable(nucleos);
    }

    /**
     * The current Virologist drops an Equipment.
     *
     * @param equipmentIndex the index of the Equipment in his Backpack
     */
    public void dropEquipment(int equipmentIndex) {
        ArrayList<Equipment> equipments = getCurrentVirologist().getBackpack().getEquipments();
        Equipment eq = equipments.get(equipmentIndex - 1);
        ArrayList<Collectable> dropped = new ArrayList<>();
        dropped.add(eq);
        getCurrentVirologist().DropCollectable(dropped);
    }

    /**
     * The current Virologist takes some Aminoacid.
     *
     * @param quantity the number of Aminoacid
     */
    public void takeAminoacid(int quantity) {
        ArrayList<Collectable> aminos = new ArrayList<>();
        for (int i = 0; i < quantity; i++)
            aminos.add(getCurrentField().getBackpack().getAminos().get(i));
        getCurrentVirologist().PickUpCollectable(aminos);
    }

    /**
     * The current Virologist takes some Nucleotide.
     *
     * @param quantity the number of Nucleotide
     */
    public void takeNucleotide(int quantity) {
        ArrayList<Collectable> nucleotides = new ArrayList<>();
        for (int i = 0; i < quantity; i++)
            nucleotides.add(getCurrentField().getBackpack().getNucleotide().get(i));
        getCurrentVirologist().PickUpCollectable(nucleotides);
    }

    /**
     * The current Virologist takes an Equipment.
     *
     * @param index the index of the Equipment in the Field's Backpack
     */
    public void takeEquipment(int index) {
        ArrayList<Collectable> pickUp = new ArrayList<>();
        pickUp.add(getCurrentField().getBackpack().getEquipments().get(index - 1));
        getCurrentVirologist().PickUpCollectable(pickUp);
    }

    /**
     * The current Virologist steals some Aminoacid from another Virologist.
     *
     * @param name     the name of the Virologist he steals from
     * @param quantity the number of the Aminoacid
     */
    public void stealAminoacid(String name, int quantity) {
        steal(name, quantity, Aminoacid.class);
    }

    /**
     * The current Virologist steals some Nucleotide from another Virologist.
     *
     * @param name     the name of the Virologist he steals from
     * @param quantity the number of the Nucleotide
     */
    public void stealNucleotide(String name, int quantity) {
        steal(name, quantity, Nucleotide.class);
    }

    private <T> void steal(String name, int quantity, Class<T> type) {
        Virologist vStealer = getCurrentVirologist();
        Virologist vPoor = getVirologist(name);
        ArrayList<Collectable> list = new ArrayList<>();
        for (int i = 0; i < quantity; i++) {
            try {
                Materials toAdd = (Materials) type.getConstructor().newInstance();
                list.add(toAdd);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        vStealer.Steal(vPoor, list);
    }

    /**
     * The current Virologist steals Equipment from another Virologist.
     *
     * @param name  the name of the Virologist he steals from
     * @param index the index of the Equipment in the other Virologist's Backpack
     */
    public void stealEquipment(String name, int index) {
        Virologist vStealer = getCurrentVirologist();
        Virologist vPoor = getVirologist(name);
        ArrayList<Collectable> stolenEq = new ArrayList<>();
        stolenEq.add(getVirologist(name).getBackpack().getEquipments().get(index - 1));
        vStealer.Steal(vPoor, stolenEq);
    }

    /**
     * The Virologist Learns the Genome of the Laboratory he stands on.
     */
    public void learnGenome() {
        getCurrentVirologist().Learn();
    }

    /**
     * Teach a Genome to a Virologist.
     *
     * @param type the type of the Genome
     * @param name the name of the Virologist
     */
    public void teachGenome(String type, String name) {
        getVirologist(name).Add(stringToGenome(type));
    }

    /**
     * The current Virologist creates an Agent.
     *
     * @param type the type of the Genome
     */
    public void createAgent(String type) {
        getCurrentVirologist().CreateAgent(stringToGenome(type));
    }

    /**
     * The current Virologist infects a Virologist with an Agent.
     *
     * @param name  the name of the infected Virologist
     * @param index the index of an Agent in the current Virologist's Backpack
     */
    public void infectVirologist(String name, int index) {
        Virologist vInfecter = getCurrentVirologist();
        Virologist vInfected = getVirologist(name);
        Agent agent = vInfecter.getBackpack().GetAgents().get(index - 1);
        vInfecter.Infect(vInfected, agent);
    }

    /**
     * The current Virologist infects a Virologist with an Agent.
     * Calling random functions is forbidden.
     *
     * @param name  the name of the infected Virologist
     * @param index the index of an Agent in the current Virologist's Backpack
     */
    public void infectVirologistRandomOff(String name, int index) {
        Virologist vInfecter = getCurrentVirologist();
        Virologist vInfected = getVirologist(name);
        Agent agent = vInfecter.getBackpack().GetAgents().get(index - 1);
        vInfecter.InfectRandomOff(vInfected, agent);
    }

    /**
     * The Controller effects a Virologist with an Agent.
     *
     * @param type the Agent
     * @param name the target
     */
    public void effectVirologist(String type, String name) {
        Virologist vInfected = getVirologist(name);
        Agent a = stringToAgent(type);
        if(a == null) {
            return;
        }
        a.Apply(vInfected);
        vInfected.getBackpack().AddApplied(a);

    }

    /**
     * The current Virologist kills a Virologist.
     *
     * @param name the name of the killed Virologist.
     */
    public void killVirologist(String name) {
        Virologist vKiller = getCurrentVirologist();
        Virologist vKilled = getVirologist(name);

        vKiller.killVirologist(vKilled);
    }

    private Agent stringToAgent(String type) {
        Agent a;
        switch (type) {
            case "chorea":
                a = new Chorea();
                break;
            case "oblivion":
                a = new Oblivion();
                break;
            case "paralysis":
                a = new Paralysis();
                break;
            case "protection":
                a = new Protection();
                break;
            case "bear":
                a = new Bear();
                break;
            default:
                return null;
        }
        return a;
    }

    private Genome stringToGenome(String type) {
        Genome g;
        switch (type) {
            case "chorea":
                g = new GenomeChorea();
                break;
            case "oblivion":
                g = new GenomeOblivion();
                break;
            case "paralysis":
                g = new GenomeParalysis();
                break;
            case "protection":
                g = new GenomeProtection();
                break;
            default:
                g = null;
        }
        ;
        return g;
    }

    private Equipment stringToEquipment(String type) {
        Equipment eq;
        switch (type) {
            case "axe":
                eq = new Axe();
                break;
            case "cloak":
                eq = new Cloak();
                break;
            case "sack":
                eq = new Sack();
                break;
            case "gloves":
                eq = new Gloves();
                break;
            default:
                return null;
        }
        return eq;
    }


}
